"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTailwindPlugin = void 0;
function addTailwindPlugin({ webpackConfig, tailwindConfig, patchComponentsStyles = false, }) {
    var _a;
    if (!tailwindConfig) {
        console.error('Missing tailwind config :', tailwindConfig);
        return;
    }
    if (tailwindConfig.purge && tailwindConfig.purge.enabled == null) {
        tailwindConfig.purge.enabled = webpackConfig.mode === 'production';
    }
    const pluginName = 'autoprefixer';
    for (const rule of webpackConfig.module.rules) {
        const ruleSetUseItems = rule.use;
        if (!(ruleSetUseItems && ruleSetUseItems.length > 0) ||
            (!patchComponentsStyles && rule.exclude)) {
            continue;
        }
        for (const useLoader of ruleSetUseItems) {
            const ruleSetLoader = useLoader;
            const ruleSetLoaderOptions = ruleSetLoader.options;
            if (!ruleSetLoaderOptions) {
                continue;
            }
            if (ruleSetLoaderOptions.postcssOptions) {
                const originPostcssOptions = ruleSetLoaderOptions.postcssOptions;
                ruleSetLoaderOptions.postcssOptions = (loader) => {
                    const _postcssOptions = originPostcssOptions(loader);
                    const insertIndex = getInsertIndex(_postcssOptions.plugins, pluginName);
                    if (insertIndex !== -1) {
                        if (patchComponentsStyles &&
                            rule.exclude &&
                            tailwindConfig.darkMode === 'class') {
                            insertPlugin(_postcssOptions.plugins, insertIndex, [
                                'postcss-ng-tailwind-in-components',
                                { parentSelector: '.dark' },
                            ]);
                        }
                        insertPlugin(_postcssOptions.plugins, insertIndex, [
                            'tailwindcss',
                            tailwindConfig,
                        ]);
                    }
                    else {
                        console.error(`${pluginName} not found in postcss plugins`);
                    }
                    return _postcssOptions;
                };
            }
            else {
                if ((_a = ruleSetLoader.loader) === null || _a === void 0 ? void 0 : _a.includes('postcss')) {
                    const originalPostcssPluginFn = ruleSetLoaderOptions.plugins;
                    if (!originalPostcssPluginFn) {
                        continue;
                    }
                    ruleSetLoaderOptions.plugins = (...args) => {
                        const plugins = originalPostcssPluginFn(...args);
                        const insertIndex = getInsertIndex(plugins, pluginName);
                        if (insertIndex !== -1) {
                            insertPlugin(plugins, insertIndex, 
                            /* eslint-disable @typescript-eslint/no-var-requires */
                            require('tailwindcss')(tailwindConfig));
                        }
                        else {
                            console.error(`${pluginName} not found in postcss plugins`);
                        }
                        return plugins;
                    };
                }
            }
        }
    }
}
exports.addTailwindPlugin = addTailwindPlugin;
function getInsertIndex(plugins, pluginToInsertAfter) {
    return plugins.findIndex(({ postcssPlugin }) => (postcssPlugin === null || postcssPlugin === void 0 ? void 0 : postcssPlugin.toLowerCase()) === pluginToInsertAfter);
}
function insertPlugin(plugins, index, pluginToInsert) {
    plugins.splice(index, 0, pluginToInsert);
}
//# sourceMappingURL=add-tailwind-plugin.js.map